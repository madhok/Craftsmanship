/*Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

For example,
Given "egg", "add", return true.

Given "foo", "bar", return false.

Given "paper", "title", return true
*/

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.length() != t.length()) return false;
        std::map<char,char> mymap;
        std::vector<char>usedtchar;
        for(int i = 0; i <s.length(); i++) {
            if(mymap.find(s[i]) != mymap.end()) {
                if(mymap[s[i]] != t[i]) return false;
            }
            else {
                if(std::find(usedtchar.begin(),usedtchar.end(),t[i]) != usedtchar.end()) return false;
                mymap[s[i]] = t[i];
                usedtchar.push_back(t[i]);
            }
        }
        return true;
    }
};
